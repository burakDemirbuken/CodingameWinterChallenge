
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;



enum e_way
{
	NORTH,
	EAST,
	SOUTH,
	WEST,
	X
};

enum e_mapTile
{
	WALL,
	ROOT,
	BASIC,
	TENTACLE,
	HARVESTER,
	SPORER,
	A,
	B,
	C,
	D,
	EMPTY
};

enum e_owner
{
	ENEMY,
	PLAYER,
	NEITHER
};


class	Tile
{
	public:
		e_mapTile	tile;
		e_owner		owner;
		Tile();
};


class TilePos
{
	public:
		int	x;
		int	y;
		TilePos(int x, int y);
};


class Map
{
	private:
		int							_width;
		int							_height;
		vector<vector<Tile>>		_map;
	public:
		// structor
		Map();
		~Map();

		Map &operator=(const Map &map);

		// getter
		int getWidth() const;
		int getHeight() const;
		e_mapTile getMapTile(int x, int y) const;

		// setter
		void setMapTile(int x, int y, Tile tile);

		// member functions
		void startMap();
		void resetMap(void);
};


class Organ
{
	private:
		int		id;
		Organ	*parent;
		Organ	*root;
		e_way	direction;
		int		x;
		int		y;

	public:
		Organ(int id, Organ *parent, Organ *root, e_way direction, int x, int y);
};


class Proteins
{
	public:
		int a;
		int b;
		int c;
		int d;

		Proteins(int a = 0, int b = 0, int c = 0, int d = 0);
};


class Basic : public Organ
{
	public:
		static Proteins	proteinCost;

	private:
};


class Player
{
	private:
		Proteins		proteins;
		int				organCount;
		vector<Organ>	organs;

	public:
		// structor
		Player();
		~Player();

		// getter
		Proteins	&getProteins();
		int			getOrganCount() const;
		Organ		&getOrgan(int index);

		// setter
		void setProteins(Proteins proteins);
		void setOrganCount(int organCount);
		void addOrgan(Organ organ);

		// member functions
		void findNearestProtein(int x, int y, TilePos &pos);
};


class Game
{
	private:
		Player	_player;
		Player	_enemy;

	public:
		static Map	map;
		// structor
		Game();
		~Game();

		void	setTile();
		void	resetMap();

		// getter
		Player	&getPlayer();
		Player	&getEnemy();
};


Tile::Tile()
{
	tile = EMPTY;
	owner = NEITHER;
}


Proteins Basic::proteinCost = Proteins(1, 0, 0, 0);


Map Game::map = Map();

Game::Game()
{

}

Game::~Game() {}

void	Game::setTile()
{
	int		x;
	int		y;
	int		owner;
	int		organId; // id of this entity if it's an organ, 0 otherwise
	int		organRootId;
	int		organParentId;
	Tile	tile;
	string	type;
	string	organ_dir; // N,E,S,W or X if not an organ

	cin >> x >> y >> type >> owner >> organId >> organ_dir >> organParentId >> organRootId; cin.ignore();

	switch (type[0])
	{
		case 'W':
			tile.tile = WALL;
			break;
		case 'B':
			if(type.length() == 1)
				tile.tile = B;
			else
				tile.tile = BASIC;
			break;
		case 'R':
			tile.tile = ROOT;
			break;
		case 'T':
			tile.tile = TENTACLE;
			break;
		case 'H':
			tile.tile = HARVESTER;
			break;
		case 'S':
			tile.tile = SPORER;
			break;
		case 'A':
			tile.tile = A;
			break;
		case 'C':
			tile.tile = C;
			break;
		case 'D':
			tile.tile = D;
			break;
		default:
			break;
	}
	switch (owner)
	{
		case 1:
			tile.owner = PLAYER;
			break;
		case -1:
			tile.owner = ENEMY;
			break;
		default:
			tile.owner = NEITHER;
			break;
	}

	map.setMapTile(x, y, tile);
	if (owner != 0)
	{
		e_way	dir;
		switch (organ_dir[0])
		{
			case 'N':
				dir = NORTH;
				break;
			case 'E':
				dir = EAST;
				break;
			case 'S':
				dir = SOUTH;
				break;
			case 'W':
				dir = WEST;
				break;
		}
		if (owner == 1)
			this->_player.addOrgan(Organ(organId, nullptr, nullptr, dir, x, y));
		else
			this->_enemy.addOrgan(Organ(organId, nullptr, nullptr, dir, x, y));
	}

}

void	Game::resetMap()
{
	map.resetMap();
}

Player	&Game::getPlayer()
{
	return _player;
}

Player	&Game::getEnemy()
{
	return _enemy;
}



TilePos::TilePos(int x, int y)
{
	this->x = x;
	this->y = y;
}


Map::Map()
{

}

Map::~Map()
{

}

void Map::setMapTile(int x, int y, Tile tile)
{
	_map[x][y] = tile;
}

e_mapTile Map::getMapTile(int x, int y) const
{
	return _map[x][y].tile;
}

int Map::getWidth() const
{
	return _width;
}

int Map::getHeight() const
{
	return _height;
}

Map &Map::operator=(const Map &map)
{
	_width = map.getWidth();
	_height = map.getHeight();
	_map = map._map;
	return *this;
}

void	Map::resetMap()
{
	for (int i = 0; i < _width; i++)
		std::fill(_map[i].begin(), _map[i].end(), Tile());
}

void	Map::startMap()
{
	cin >> _width >> _height; cin.ignore();
	_map.resize(_width);
	for (int i = 0; i < _width; i++)
		_map[i].resize(_height);
}


Organ::Organ(int id, Organ *parent, Organ *root, e_way direction, int x, int y)
{
	this->id = id;
	this->parent = parent;
	this->root = root;
	this->direction = direction;
	this->x = x;
	this->y = y;
}


Player::Player()
{
	organCount = 0;
}

Player::~Player()
{
}

Proteins &Player::getProteins()
{
	return proteins;
}

int Player::getOrganCount() const
{
	return organCount;
}

Organ &Player::getOrgan(int index)
{
	return organs[index];
}

void Player::setProteins(Proteins proteins)
{
	this->proteins = proteins;
}

void Player::setOrganCount(int organCount)
{
	this->organCount = organCount;
}

void Player::addOrgan(Organ organ)
{
	organs.push_back(organ);
}

void Player::findNearestProtein(int x, int y, TilePos &pos)
{
	if(Game::map.getMapTile(x,y) == A)
	{
		pos = TilePos(x, y);
		return;
	}
	if (x < 0 || y < 0 || x >= Game::map.getWidth() ||
		y >= Game::map.getHeight() ||
		Game::map.getMapTile(x, y) == WALL)
		return;
	findNearestProtein(x + 1, y, pos);
	findNearestProtein(x - 1, y, pos);
	findNearestProtein(x, y + 1, pos);
	findNearestProtein(x, y - 1, pos);
}


Proteins::Proteins(int a, int b, int c, int d)
{
	this->a = a;
	this->b = b;
	this->c = c;
	this->d = d;
}


/**
 * Grow and multiply your organisms to end up larger than your opponent.
 **/


int main()
{
	Game	game;
	Game::map.startMap();
    // game loop
    while (1)
	{
		//game.resetMap();
        int entity_count;
        cin >> entity_count; cin.ignore();
		game.resetMap();
        for (int i = 0; i < entity_count; i++)
			game.setTile();
		int my_a, my_b, my_c, my_d; // your protein stock
        cin >> my_a >> my_b >> my_c >> my_d; cin.ignore();
        game.getPlayer().setProteins(Proteins(my_a, my_b, my_c, my_d));

		int opp_a, opp_b, opp_c, opp_d; // opponent's protein stock
		cin >> opp_a >> opp_b >> opp_c >> opp_d; cin.ignore();
        game.getEnemy().setProteins(Proteins(my_a, my_b, my_c, my_d));

		int required_actions_count; // your number of organisms, output an action for each one in any order
        cin >> required_actions_count; cin.ignore();

		cerr << "required_actions_count: " << required_actions_count << endl;
		// round
		for (int i = 0; i < required_actions_count; i++) {

            // Write an action using cout. DON'T FORGET THE "<< endl"
            // To debug: cerr << "Debug messages..." << endl;
			TilePos	pos(1, 2);
			game.getPlayer().findNearestProtein(1, 2, pos);
			cout << "GROW 1 " << pos.x << " " << pos.y << " BASIC" << endl;
            //cout << "WAIT" << endl;
        }
    }
}
/*
int main()
{
	Game	game;
	// game loop
	while (1) {
		game.resetMap();
		int entity_count;
		cin >> entity_count; cin.ignore();
		for (int i = 0; i < entity_count; i++)
			game.setTile();
		int my_a, my_b, my_c, my_d; // your protein stock
		cin >> my_a >> my_b >> my_c >> my_d; cin.ignore();
		game.getPlayer().setProteins(Proteins(my_a, my_b, my_c, my_d));

		int opp_a, opp_b, opp_c, opp_d; // opponent's protein stock
		cin >> opp_a >> opp_b >> opp_c >> opp_d; cin.ignore();
		game.getEnemy().setProteins(Proteins(opp_a, opp_b, opp_c, opp_d));

		int required_actions_count; // your number of organisms, output an action for each one in any order
		cin >> required_actions_count; cin.ignore();

		// round
		for (int i = 0; i < required_actions_count; i++)
		{

			// Write an action using cout. DON'T FORGET THE "<< endl"
			// To debug: cerr << "Debug messages..." << endl;
			TilePos	pos(0, 0);
			game.getPlayer().findNearestProtein(0, 0, pos);
			cout << "GROW 1 " << pos.x << " " << pos.y << " BASIC" << endl;
		}
	}
}
 */

